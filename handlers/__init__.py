from graphics import photo_input
# text_task_input, image_task_input –Ω—É–∂–Ω—ã –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—Ç—å –∏ –æ—Ç–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ –Ω–µ–Ω—É–∂–Ω—ã–µ
from config import bot, dp, text_task_input, image_task_input
from physics import physics_calc, chat_to_machine_condition_forming, provided_values_forming, \
    machine_to_chat_condition_forming
from aiogram import types
from copy import deepcopy


@dp.message_handler(commands=['start', 'help'])
async def greetings(message):
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —è ‚Äç–±–æ—Çü§ñ –¥–ª—è –ø–æ–º–æ—â–∏ —Å '
                                                 '—Ä–µ—à–µ–Ω–∏–µ–º‚úÖ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.')
    await input(message)


async def input(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ('–¢–µ–∫—Å—Ç', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞—á–∏, '
                           '–∏ —è –ø–æ–ø—ã—Ç–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ –µ–µ —Ä–µ—à–∏—Ç—å üòº', reply_markup=keyboard)


@dp.message_handler(regexp='–¢–µ–∫—Å—Ç')
async def start(message):
    global text_task_input
    markup = types.ReplyKeyboardRemove()
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏üìù:', reply_markup=markup)
    text_task_input = True


@dp.message_handler(regexp='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
async def start(message):
    global image_task_input
    markup = types.ReplyKeyboardRemove()
    await bot.send_message(message.from_user.id, '–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏üì∑:', reply_markup=markup)
    image_task_input = True


@dp.message_handler(regexp='–î–∞, —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ')
async def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏')
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ '
                                                 '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=keyboard)


@dp.message_handler(regexp='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏')
async def start(message):
    await input(message)


@dp.message_handler(regexp='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def start(message):
    global phys_formula_input
    global phys_value_input
    global text_task_input
    global image_task_input
    phys_formula_input = False
    phys_value_input = False
    image_task_input = False
    text_task_input = False

    await greetings(message)


@dp.message_handler(regexp='–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
async def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ('–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –≤ –î–∞–Ω–æ', '–£–±—Ä–∞—Ç—å –ª–∏—à–Ω—é—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –≤ –î–∞–Ω–æ',
               '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ–æ—Ä–º—É–ª—É –≤ —Ä–µ—à–µ–Ω–∏–∏', '–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ–æ—Ä–º—É–ª—É –≤ —Ä–µ—à–µ–Ω–∏–∏',
               '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—á–∏')
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏ –Ω–∞ –º–æ—é –æ—à–∏–±–∫—É –æ–¥–Ω–∏–º –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–µ '
                                                 '–∏—Å–ø—Ä–∞–≤–∏—Ç—å!',
                           reply_markup=keyboard)


@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ–æ—Ä–º—É–ª—É –≤ —Ä–µ—à–µ–Ω–∏–∏')
async def start(message):
    global phys_formula_input
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –∏ –µ–µ —Ñ–æ—Ä–º—É–ª—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:    '
                                                 '–§–æ—Ä–º—É–ª–∞: [–§–∏–∑–∏—á–µ—Å–∫–∞—è –≤–µ–ª–∏—á–∏–Ω–∞] = [—Ñ–æ—Ä–º—É–ª–∞]')
    phys_formula_input = True


@dp.message_handler(regexp='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â—É—é —Ñ–æ—Ä–º—É–ª—É –≤ —Ä–µ—à–µ–Ω–∏–∏')
async def start(message):
    global response
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É ‚Ññ' + str(i + 1) for i in range(len(response[2].split('\n')))]
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ä–º—É–ª—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å', reply_markup=keyboard)


@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –≤ –î–∞–Ω–æ')
async def start(message):
    global phys_value_input
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –∏ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:   '
                                                 '–í–µ–ª–∏—á–∏–Ω–∞: [–§–∏–∑–∏—á–µ—Å–∫–∞—è –≤–µ–ª–∏—á–∏–Ω–∞] = [–∑–Ω–∞—á–µ–Ω–∏–µ] [–µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è]')
    phys_value_input = True


@dp.message_handler(regexp='–£–±—Ä–∞—Ç—å –ª–∏—à–Ω—é—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É –≤ –î–∞–Ω–æ')
async def start(message):
    global response
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–£–±—Ä–∞—Ç—å ' + elem[3:].split()[0] for elem in response[0].split('\n')]
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –≤–µ–ª–∏—á–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å',
                           reply_markup=keyboard)


@dp.message_handler(regexp='–§–æ—Ä–º—É–ª–∞: ')
async def start(message):
    global phys_formula_input
    if phys_formula_input:
        global response
        print('response:', response)
        provided_values, requested_values, formulas, result_formula, expr, db_info = \
            await chat_to_machine_condition_forming(response)
        global new_db_info
        new_db_info = deepcopy(db_info)
        value, formula = message.text.replace('–§–æ—Ä–º—É–ª–∞: ', '').split(' = ')
        new_db_info.insert(0, (value, formula, '', None))
        requested_values.insert(0, (value, formula, '', None))
        response = await machine_to_chat_condition_forming(provided_values, requested_values, 0,
                                                           provided_formulas=formulas,
                                                           provided_result_formula=result_formula, provided_expr=expr,
                                                           db_info=db_info)
        print('new_db_info')
        print(*new_db_info)

        await confirm_changes_question(message)

    phys_formula_input = False


@dp.message_handler(regexp='–ó–∞–ø—Ä–µ—Ç–∏—Ç—å')
async def start(message):
    global response
    global forbidden_formula
    print('–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É ‚Ññ')
    provided_values, requested_values, formulas, result_formula, expr, db_info = \
        await chat_to_machine_condition_forming(response)
    n = str(message.text.split()[2][1:])
    formulas = formulas.split('\n')
    for i in range(len(formulas)):
        print(formulas[i], n)
        if formulas[i].startswith(n):
            forbidden_formula = [formulas[i].split()[-1]]
            print('forbidden_formula', forbidden_formula)
            break

    await confirm_changes_question(message)


@dp.message_handler(regexp='–£–±—Ä–∞—Ç—å')
async def start(message):
    global response
    provided_values, requested_values, formulas, result_formula, expr, db_info = \
        await chat_to_machine_condition_forming(response)
    provided_values.pop(message.text.split()[1])
    response = await machine_to_chat_condition_forming(provided_values, requested_values, 0, provided_formulas=formulas,
                                                       provided_result_formula=result_formula, provided_expr=expr,
                                                       db_info=db_info)
    await confirm_changes_question(message)


@dp.message_handler(regexp='–í–µ–ª–∏—á–∏–Ω–∞: ')
async def start(message):
    global phys_value_input
    if phys_value_input:
        global response
        print('response:', response)
        provided_values, requested_values, formulas, result_formula, expr, db_info = \
            await chat_to_machine_condition_forming(response)
        provided_values = provided_values | await provided_values_forming(message.text.replace('–í–µ–ª–∏—á–∏–Ω–∞: ', ''))
        print('provided_values:', provided_values)
        print('formulas:', formulas)
        response = await machine_to_chat_condition_forming(provided_values, requested_values, 0,
                                                           provided_formulas=formulas,
                                                           provided_result_formula=result_formula, provided_expr=expr,
                                                           db_info=db_info)
        await confirm_changes_question(message)

    phys_value_input = False


async def confirm_changes_question(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ('–î–∞, —Ä–µ—à–∏ –∑–∞–¥–∞—á—É', '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
    keyboard.add(*buttons)
    await bot.send_message(message.from_user.id, '–≠—Ç–æ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –±—ã —Ö–æ—Ç–µ–ª –≤–Ω–µ—Å—Ç–∏?',
                           reply_markup=keyboard)


@dp.message_handler(regexp='–î–∞, —Ä–µ—à–∏ –∑–∞–¥–∞—á—É')
async def confirm_changes(message):
    global forbidden_formula
    global new_db_info
    try:
        print(forbidden_formula)
    except:
        forbidden_formula = []
    try:
        print(new_db_info)
    except:
        new_db_info = None
    print('confirm_changes - response', response)
    await solving_physical_task(message, resp=response, ignore_formulas=forbidden_formula, new_db_info=new_db_info)


@dp.message_handler(content_types=['photo'])
async def start(message):
    global image_task_input
    if image_task_input:
        img = message.photo[-1]
        await img.download(destination_file='C:/Users/t106o/PycharmProjects/UchiDomaProject/test_imgs/img.jpg')
        text = await photo_input()
        text = text.replace('\n', '').replace('\r', ' ')
        await bot.send_message(message.from_user.id,
                               f'–¢–µ–∫—Å—ÇüìÑ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n{text}')
        await solving_physical_task(message)
        image_task_input = False


async def solving_physical_task(message, resp=None, ignore_formulas=None, new_db_info=None):
        bot_message = await bot.send_message(message.from_user.id, '–û–∂–∏–¥–∞–π—Ç–µ...')
        global response
        if not resp:
            response = await physics_calc(text=message.text)
        else:
            provided_values, requested_values, formulas, result_formula, expr, db_info = \
                await chat_to_machine_condition_forming(resp)
            response = await physics_calc(provided_values=provided_values, requested_values=requested_values,
                                          ignore_formulas=ignore_formulas, db_info=new_db_info)
        if response:
            given, to_find, formulas, result_formula, expr, provided_values, requested_values, db_info = response
            await bot.edit_message_text(chat_id=bot_message.chat.id, message_id=bot_message.message_id,
                                        text='‚úÖ–†–µ—à–µ–Ω–∏–µ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–∏üëáüíØ:\n'
                                             '–î–∞–Ω–æ:\n'
                                             f'{given}\n'
                                             '–ù–∞–π—Ç–∏:\n'
                                             f'{to_find}\n'
                                             '–†–µ—à–µ–Ω–∏–µ:\n'
                                             f'{formulas}\n'
                                             '–ò—Ç–æ–≥–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞:\n'
                                             f'{result_formula}\n'
                                             '–û—Ç–≤–µ—Ç:\n'
                                             f'{expr}')

            """
            await bot.send_message(message.from_user.id,
                           f'‚úÖ–í–æ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º—É–ª—ãüìÉ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–∏üëáüíØ:\n{", ".join(formuls)}')
            """
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = ('–î–∞, —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ', '–ù–µ—Ç, –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É', '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
            keyboard.add(*buttons)
            await bot.send_message(message.from_user.id,
                                   '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è —Ä–µ—à–∏–ª —Ç–≤–æ—é –∑–∞–¥–∞—á—É?',
                                   reply_markup=keyboard)
            """
            await bot.send_message(message.from_user.id,
                                   'ü§†–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á! –í–≤–æ–¥–∏ —Å–ª–µ–¥—É—é—â—É—éüò§ ',
                                   reply_markup=keyboard)
            """
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            await bot.send_message(message.from_user.id,
                                   '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ —Å–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ—é –∑–∞–¥–∞—á—É. –û–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∫ —Å –¥—Ä—É–≥–∏–º–∏ '
                                   '—Å–ª–æ–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –Ω–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Å–∫–æ—Ä–æ –º–µ–Ω—è –Ω–∞—É—á–∞—Ç —Ä–µ—à–∞—Ç—å –∏ —Ç–∞–∫–∏–µ '
                                   '–∑–∞–¥–∞—á–∏. –ü—Ä–∏—Ö–æ–¥–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!',
                                   reply_markup=keyboard)



@dp.message_handler()
async def some_send(message):
    global text_task_input
    if text_task_input:
        await solving_physical_task(message)
        text_task_input = False
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
        await bot.send_message(message.from_user.id, '‚ùå–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã', reply_markup=keyboard)
